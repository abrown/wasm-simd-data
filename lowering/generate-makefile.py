#!/bin/python3

import yaml, os

families = {}
for filename in os.listdir(os.path.join(os.path.dirname(__file__), '..', 'data', 'families')):
  if not filename.endswith(".yml"):
    continue

  with open(os.path.join(os.path.dirname(__file__), '..', 'data', 'families', filename), 'r') as fp:
    families[filename[:-4]] = yaml.safe_load(fp)

targets = []
with open(os.path.join(os.path.dirname(__file__), "..", "data", "targets.yml"), 'r') as fp:
  targets = yaml.safe_load(fp)

print('# Automatically generated by generate-makefile.py; do not modify.')
print('')
print('CFLAGS ?= -O3 -I. -DSIMDE_ENABLE_NATIVE_ALIASES $(EXTRA_CFLAGS)')
print('LLVM_MCA ?= llvm-mca')
print('CLANG ?= clang')
print('')
print('.PHONY: clean')
print('')

print(families)

print('all: ', end = '')
for family_name in families.keys():
  family = families[family_name]
  if not "instructions" in family:
    continue
  for instruction in family["instructions"]:
    for target in targets:
      for option in target["options"]:
        print('.'.join([instruction["name"], target["name"], option["name"], 'json']), end = " ")
print("\n")

print('clean: ')
print('\trm -rf ', end = '')
for family_name in families.keys():
  family = families[family_name]
  if not "instructions" in family:
    continue
  for instruction in family["instructions"]:
    for target in targets:
      for option in target["options"]:
        print('.'.join([instruction["name"], target["name"], option["name"], 'json']), end = " ")
        print('.'.join([instruction["name"], target["name"], option["name"], 's']), end = " ")
print("\n")

for family_name in families.keys():
  family = families[family_name]
  if not "instructions" in family:
    continue
  for instruction in family["instructions"]:
    for target in targets:
      for option in target["options"]:
        print('.'.join([instruction["name"], target["name"], option["name"], 'json']), end = ': ')
        print('.'.join([instruction["name"], target["name"], option["name"], 's']))
        print('\t$(LLVM_MCA) --json --mtriple=%s -mcpu=%s -o $@ $^ 2>/dev/null' % (target["triple"], target["analysis_cpu"]))
        print('.'.join([instruction["name"], target["name"], option["name"], 's']), end = ': ')
        print('.'.join([instruction["name"], 'c']))
        print('\t$(CLANG) --target=%s %s $(CFLAGS) -S -o $@ $^' % (target["triple"], option["flags"]))
      print('')
