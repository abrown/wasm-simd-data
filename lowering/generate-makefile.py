#!/bin/python3

import yaml

instructions = {}
targets = {}
with open("../data/instructions.yml", 'r') as fp:
  instructions = yaml.safe_load(fp)
with open("../data/targets.yml", 'r') as fp:
  targets = yaml.safe_load(fp)

print('# Automatically generated by generate-makefile.py; do not modify.')
print('')
print('CFLAGS ?= -O3 -I. -DSIMDE_ENABLE_NATIVE_ALIASES $(EXTRA_CFLAGS)')
print('LLVM_MCA ?= llvm-mca')
print('CLANG ?= clang')
print('')
print('.PHONY: clean')
print('')

print('all: ', end = '')
for instruction in instructions["instructions"]:
  for target in targets["targets"]:
    for option in target["options"]:
      print('.'.join([instruction["name"], target["name"], option["name"], 'json']), end = " ")
print("\n")

print('clean: ')
print('\trm -rf ', end = '')
for instruction in instructions["instructions"]:
  for target in targets["targets"]:
    for option in target["options"]:
      print('.'.join([instruction["name"], target["name"], option["name"], 'json']), end = " ")
      print('.'.join([instruction["name"], target["name"], option["name"], 's']), end = " ")
print("\n")

for instruction in instructions["instructions"]:
  for target in targets["targets"]:
    for option in target["options"]:
      print('.'.join([instruction["name"], target["name"], option["name"], 'json']), end = ': ')
      print('.'.join([instruction["name"], target["name"], option["name"], 's']))
      print('\t$(LLVM_MCA) --json --mtriple=%s -mcpu=%s -o $@ $^ 2>/dev/null' % (target["triple"], target["analysis_cpu"]))
      print('.'.join([instruction["name"], target["name"], option["name"], 's']), end = ': ')
      print('.'.join([instruction["name"], 'c']))
      print('\t$(CLANG) --target=%s %s $(CFLAGS) -S -o $@ $^' % (target["triple"], option["flags"]))
    print('')
